#!/bin/bash
#-*-shell-script-*-

set -x

# the name of the floppy based network configuration
# files (checked first). the name planet.cnf is kept
# for backward compatibility with old nodes, and only
# the floppy disk is searched for files with this name.
# new files are named plnode.txt and can be located on
# a floppy or usb device or on the cdrom
OLD_NODE_CONF_NAME=planet.cnf
NEW_NODE_CONF_NAME=plnode.txt

# one location of cd-based network configuration file
# (checked if floppy conf file missing and usb
# configuration file is missing)
CD_NET_CONF_BOOT=/usr/boot/$NEW_NODE_CONF_NAME

# the other location of cd-based network configuration file
CD_NET_CONF_ROOT=/usr/$NEW_NODE_CONF_NAME

# if all other network configuration file sources 
# don't exist, fall back to this one (always on the cd)
FALLBACK_NET_CONF=/usr/boot/default-node.txt

# a temporary place to hold the old configuration file
# off of the floppy disk if we find it (so we don't have
# to remount the floppy later)
TMP_OLD_FLOPPY_CONF_FILE=/tmp/oldfloppy_planet.cnf

# once a configuration file is found, save it in /tmp
# (may be used later by boot scripts)
USED_NET_CONF=/tmp/planet.cnf

# default device to use for contacting PLC if not specified
# in the configuration file
DEFAULT_NET_DEV=eth0

# where to store the temporary dhclient conf file
DHCLIENT_CONF_FILE=/tmp/dhclient.conf

# which fs types we support finding node configuration files on
# (will be based as a -t parameter to mount)
NODE_CONF_DEVICE_FS_TYPES="msdos,ext2"

# a temporary place to mount devices that might contain configuration
# files on
CONF_DEVICE_MOUNT_POINT=/mnt/confdevice
/bin/mkdir -p $CONF_DEVICE_MOUNT_POINT

# for some backwards compatibility, save the ifconfig <device>
# output to this file after everything is online
IFCONFIG_OUTPUT=/tmp/ifconfig

# set to 1 if the default network configuration was loaded off the cd
# (no other configuration file found)
DEFAULT_NET_CONF=0


function net-init-failed() {
    verbose-message "pl_netinit: network initialization failed with interface $ETH_DEVICE"
    verbose-forensics "failed to configure $ETH_DEVICE"
    hang-and-shutdown "net-init-failed"
    exit 1
}

# find and parse a node network configuration file. return 0 if not found,
# return 1 if found and parsed. if this is the case, DEFAULT_NET_CONF will 
# be set to 1. For any found configuration file, $USED_NET_CONF will
# contain the validated contents
function find-node-config() {
    /bin/rm -f $TMP_OLD_FLOPPY_CONF_FILE 2>&1 > /dev/null

    verbose-message "pl_netinit: looking for node configuration file on floppy"
    
    /bin/mount -o ro -t $NODE_CONF_DEVICE_FS_TYPES /dev/fd0 \
	$CONF_DEVICE_MOUNT_POINT 2>&1 > /dev/null
    if [[ $? -eq 0 ]]; then

        # 1. check for new named file first on the floppy disk
	if [ -r "$CONF_DEVICE_MOUNT_POINT/$NEW_NODE_CONF_NAME" ]; then
	    conf_file="$CONF_DEVICE_MOUNT_POINT/$NEW_NODE_CONF_NAME"
	    verbose-message "pl_netinit: found node configuration file $conf_file"
	    /etc/init.d/pl_validateconf < $conf_file > $USED_NET_CONF
	    /bin/umount $CONF_DEVICE_MOUNT_POINT
	    return 1

        # since we have the floppy mounted already, see if an old file
        # exists there so we don't have to remount the floppy when we need
        # to check for an old file on it (later in the order). if it does
        # just copy it off to a special location
	elif [ -r "$CONF_DEVICE_MOUNT_POINT/$OLD_NODE_CONF_NAME" ]; then
	    conf_file="$CONF_DEVICE_MOUNT_POINT/$OLD_NODE_CONF_NAME"
	    /bin/cp -f $conf_file $TMP_OLD_FLOPPY_CONF_FILE
	    verbose-message "pl_netinit: found old named configuration file, checking later."
	else
	    verbose-message "pl_netinit: floppy mounted, but no configuration file."
	fi

	/bin/umount $CONF_DEVICE_MOUNT_POINT
    else
	verbose-message "pl_netinit: no floppy could be mounted, continuing search."
    fi

    # 2. check for a new named file on removable flash devices (those 
    # that start with sd*, because usb_storage emulates scsi devices).
    # to prevent checking normal scsi disks, also make sure
    # /sys/block/<dev>/removable is set to 1

    verbose-message "pl_netinit: looking for node configuration file on flash based devices"

    # make the sd* hd* expansion fail to an empty string if there are no sd
    # devices
    shopt -s nullglob

    for device in /sys/block/[hsv]d*; do
	removable=$(cat $device/removable)
	if [[ $removable -ne 1 ]]; then
	    continue
	fi

	partitions=$(/bin/awk "\$4 ~ /$(basename $device)[0-9]*/ { print \$4 }" /proc/partitions)
	for partition in $partitions ; do
	    check_dev=/dev/$partition

	    verbose-message "pl_netinit: looking for node configuration file on device $check_dev"
	    /bin/mount -o ro -t $NODE_CONF_DEVICE_FS_TYPES $check_dev \
		$CONF_DEVICE_MOUNT_POINT 2>&1 > /dev/null
	    if [[ $? -eq 0 ]]; then
		if [ -r "$CONF_DEVICE_MOUNT_POINT/$NEW_NODE_CONF_NAME" ]; then
		    conf_file="$CONF_DEVICE_MOUNT_POINT/$NEW_NODE_CONF_NAME"
		    verbose-message "pl_netinit: found node configuration file $conf_file"
		    /etc/init.d/pl_validateconf < $conf_file > $USED_NET_CONF
		    verbose-message "pl_netinit: found configuration"
		    /bin/umount $CONF_DEVICE_MOUNT_POINT
		    return 1
		fi
		
		verbose-message "pl_netinit: ERROR - not found"

		/bin/umount $CONF_DEVICE_MOUNT_POINT
	    fi
	done
    done

    # normal filename expansion setting
    shopt -u nullglob

    # 3. see if there is an old file on the floppy disk. if there was,
    # the file $TMP_OLD_FLOPPY_CONF_FILE will be readable.
    if [ -r "$TMP_OLD_FLOPPY_CONF_FILE" ]; then
	conf_file=$TMP_OLD_FLOPPY_CONF_FILE
	verbose-message "pl_netinit: found node configuration file $conf_file"
	/etc/init.d/pl_validateconf < $conf_file > $USED_NET_CONF
	return 1
    fi


    # 4. check for plnode.txt on the cd at /usr/boot
    verbose-message "pl_netinit: looking for network configuration on cd in /usr/boot"
    if [ -r "$CD_NET_CONF_BOOT" ]; then
	
	verbose-message "pl_netinit: found cd configuration file $CD_NET_BOOT_CONF"
	/etc/init.d/pl_validateconf < $CD_NET_CONF_BOOT > $USED_NET_CONF
	return 1
    fi
    

    # 5. check for plnode.txt on the cd at /usr
    verbose-message "pl_netinit: looking for network configuration on cd in /usr"
    if [ -r "$CD_NET_CONF_ROOT" ]; then
	
	verbose-message "pl_netinit: found cd configuration file $CD_NET_CONF_ROOT"
	/etc/init.d/pl_validateconf < $CD_NET_CONF_ROOT > $USED_NET_CONF
	return 1
    fi


    # 6. no node configuration file could be found, fall back to
    # builtin default. this can't be used to install a machine, but
    # will at least let it download and run the boot manager, which
    # can inform the users appropriately.
    verbose-message "pl_netinit: using default network configuration"
    if [ -r "$FALLBACK_NET_CONF" ]; then
	verbose-message "pl_netinit: found cd default configuration file $FALLBACK_NET_CONF"
	/etc/init.d/pl_validateconf < $FALLBACK_NET_CONF > $USED_NET_CONF
	DEFAULT_NET_CONF=1
	return 1
    fi

    return 0
}


verbose-message "pl_netinit: bringing loopback network device up"
/sbin/ifconfig lo 127.0.0.1 up

find-node-config
if [ $? -eq 0 ]; then
    # no network configuration file found. this should not happen as the
    # default cd image has a backup one. halt.
    verbose-message "pl_netinit: ERROR - unable to find even a default network configuration"
    verbose-message "pl_netinit: file, this cd may be corrupt."
    net-init-failed
fi

# load the configuration file. if it was a default one (not user specified),
# then remove the saved copy from /tmp, but continue on. since a network 
# configuration file is required and boot scripts only know about this location
# they will fail (as they should) - but the network will be up if dhcp is
# available

verbose-message "pl_netinit: loading network configuration"
. $USED_NET_CONF

if [[ $DEFAULT_NET_CONF -eq 1 ]]; then
    /bin/rm -f $USED_NET_CONF
fi

# initialize IPMI device
if [[ -n "$IPMI_ADDRESS" ]] ; then
    echo -n "pl_netinit: initializing IPMI: "
    cmd="ipnmac -i $IPMI_ADDRESS"
    if [[ -n "$IPMI_MAC" ]] ; then
	cmd="$cmd -m $IPMI_MAC"
    fi
    echo $cmd
    $cmd
fi

# now, we need to find which device to use (ie, eth0 or eth1). start out
# by defaulting to eth0, then see if the network configuration file specified
# either a mac address (in which case we will need to find the device), or
# the device itself

ETH_DEVICE=
if [[ -n "$NET_DEVICE" ]]; then
    # the user specified a mac address we should use. find the network
    # device for it.
    NET_DEVICE=$(tr A-Z a-z <<< $NET_DEVICE)

    pushd /sys/class/net
    for device in *; do
	dev_address=$(cat $device/address | tr A-Z a-z)
	if [ "$device" == "$NET_DEVICE" -o "$dev_address" == "$NET_DEVICE" ]; then
	    ETH_DEVICE=$device
	    verbose-message "pl_netinit: found device $ETH_DEVICE with mac address $dev_address"
	    break
	fi
    done
    popd
fi

# if we didn't find a device yet, check which is the primary
if [[ -z "$ETH_DEVICE" ]]; then
    pushd /etc/sysconfig/network-scripts > /dev/null
    for conf in ifcfg-*; do
	egrep -q '^PRIMARY=["'"'"']?[yY1t]' $conf || continue
	ETH_DEVICE=${conf#ifcfg-}
	break
    done
    popd > /dev/null
fi

# still nothing? fail the boot.
if [[ -z "$ETH_DEVICE" ]]; then
    verbose-message "pl_netinit: unable to find a usable device, check to make sure"
    verbose-message "pl_netinit: the NET_DEVICE field in the configuration file"
    verbose-message "pl_netinit: corresponds with a network adapter on this system"
    net-init-failed
fi

# within a systemd-driven startup, we often see this stage
# triggered before the network interface is actually exposed
# by udev/kernel
# although of course we have network-online.target
# as a requirement; go figure what systemd actually does..

# in any case, let us try to work around that by allowing some delay
# here

# tmp: Thierry June 2015
# on fedora 21 nodes we see this running in a context where eth0 is not known to the system
# could be related to a dependency that we poorly describe to systemd
# I am increasing this timeout to 2 minutes in order to check that conjecture
ALLOW=60
COUNTER=0
while true; do
    if /sbin/ifconfig $ETH_DEVICE >& /dev/null; then
	verbose-message "pl_netinit: device present $ETH_DEVICE, proceeding (${COUNTER}s/${ALLOW}s)"
	break
    fi
    verbose-message "pl_netinit: waiting for device $ETH_DEVICE - ${COUNTER}s/${ALLOW}s"
    set -x
    /sbin/ifconfig
    journalctl -b | egrep 'eth|bnx|udev'
    systemctl list-unit-files | grep -i network
    set +x 
    COUNTER=$(($COUNTER+1))
    [ $COUNTER -ge $ALLOW ] && net-init-failed
    sleep 1
done


# actually check to make sure ifconfig <device> succeeds

/sbin/ifconfig $ETH_DEVICE up 2>&1 > /dev/null || {
    verbose-message "pl_netinit: device $ETH_DEVICE does not exist, most likely"
    verbose-message "pl_netinit: this CD does not have hardware support for your"
    verbose-message "pl_netinit: network adapter. please send the following lines"
    verbose-message "pl_netinit: to your PlanetLab support for further assistance"
    net-init-failed
}

verbose-message "pl_netinit: attempting to start networking"
/sbin/service network start

# for backwards compatibility
/sbin/ifconfig $ETH_DEVICE > $IFCONFIG_OUTPUT

verbose-message "pl_netinit: network online"

# patch for f22 - if /etc/resolv.conf is empty in static mode
function pl-netinit-patch-resolv-conf () {
    file=/etc/resolv.conf
    needed=""
    # missing file : patch needed
    if ! [ -f $file ]; then
	needed=true
    # empty file : patch needed
    elif cmp $file /dev/null; then
	needed=true
    fi
    if [ -n "$needed" ]; then
	verbose-message "pl_netinit: patching $file"
	source /etc/sysconfig/network-scripts/ifcfg-${ETH_DEVICE}
	# delete because it's a symlink to /run/systemd/resolve/resolv.conf
	# which looks really weird (ls -lL /etc/resolv.conf does not show anything)
	rm $file
	( [ -n "$DNS1" ] && echo nameserver $DNS1; \
	  [ -n "$DNS2" ] && echo nameserver $DNS2 ) > $file
    else
	echo pl_netinit has no need to patch $file
    fi
}

pl-netinit-patch-resolv-conf

verbose-forensics "pl_netinit epilogue"
