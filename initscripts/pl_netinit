#!/bin/sh

# the name of the floppy based network configuration
# files (checked first). the name planet.cnf is kept
# for backward compatibility with old nodes, and only
# the floppy disk is searched for files with this name.
# new files are named plnode.txt and can be located on
# a floppy or usb device or on the cdrom
OLD_NODE_CONF_NAME=planet.cnf
NEW_NODE_CONF_NAME=plnode.txt

# one location of cd-based network configuration file
# (checked if floppy conf file missing and usb
# configuration file is missing)
CD_NET_CONF_BOOT=/usr/boot/$NEW_NODE_CONF_NAME

# the other location of cd-based network configuration file
CD_NET_CONF_ROOT=/usr/$NEW_NODE_CONF_NAME

# if all other network configuration file sources 
# don't exist, fall back to this one (always on the cd)
FALLBACK_NET_CONF=/usr/boot/default-node.txt

# a temporary place to hold the old configuration file
# off of the floppy disk if we find it (so we don't have
# to remount the floppy later)
TMP_OLD_FLOPPY_CONF_FILE=/tmp/oldfloppy_planet.cnf

# once a configuration file is found, save it in /tmp
# (may be used later by boot scripts)
USED_NET_CONF=/tmp/planet.cnf

# default device to use for contacting PLC if not specified
# in the configuration file
DEFAULT_NET_DEV=eth0

# where to store the temporary dhclient conf file
DHCLIENT_CONF_FILE=/tmp/dhclient.conf

# which fs types we support finding node configuration files on
# (will be based as a -t parameter to mount)
NODE_CONF_DEVICE_FS_TYPES="msdos,ext2"

# a temporary place to mount devices that might contain configuration
# files on
CONF_DEVICE_MOUNT_POINT=/mnt/confdevice
/bin/mkdir -p $CONF_DEVICE_MOUNT_POINT

# for some backwards compatibility, save the ifconfig <device>
# output to this file after everything is online
IFCONFIG_OUTPUT=/tmp/ifconfig

# set to 1 if the default network configuration was loaded off the cd
# (no other configuration file found)
DEFAULT_NET_CONF=0


net_init_failed()
{
    echo
    echo $(date "+%H:%M:%S") " pl_netinit: network initialization failed,"
    echo $(date "+%H:%M:%S") " pl_netinit: shutting down machine in two hours"
    /bin/sleep 2h
    /sbin/shutdown -h now
    exit 1
}

# Function for checking the IP address to see if its sensible.
check_ip()
{
    case "$*" in
        "" | *[!0-9.]* | *[!0-9]) return 1 ;;
    esac
    local IFS=.
    set -- $*
    [ $# -eq 4 ] &&
    [ ${1:-666} -le 255 ] && [ ${2:-666} -le 255 ] &&
    [ ${3:-666} -le 255 ] && [ ${4:-666} -le 255 ]
}

# find and parse a node network configuration file. return 0 if not found,
# return 1 if found and parsed. if this is the case, DEFAULT_NET_CONF will 
# be set to 1. For any found configuration file, $USED_NET_CONF will
# contain the validated contents
find_node_config()
{
    /bin/rm -f $TMP_OLD_FLOPPY_CONF_FILE 2>&1 > /dev/null

    echo $(date "+%H:%M:%S") " pl_netinit: looking for node configuration file on floppy"
    
    /bin/mount -o ro -t $NODE_CONF_DEVICE_FS_TYPES /dev/fd0 \
	$CONF_DEVICE_MOUNT_POINT 2>&1 > /dev/null
    if [[ $? -eq 0 ]]; then

        # 1. check for new named file first on the floppy disk
	if [ -r "$CONF_DEVICE_MOUNT_POINT/$NEW_NODE_CONF_NAME" ]; then
	    conf_file="$CONF_DEVICE_MOUNT_POINT/$NEW_NODE_CONF_NAME"
	    echo $(date "+%H:%M:%S") " pl_netinit: found node configuration file $conf_file"
	    /etc/init.d/pl_validateconf < $conf_file > $USED_NET_CONF
	    /bin/umount $CONF_DEVICE_MOUNT_POINT
	    return 1

        # since we have the floppy mounted already, see if an old file
        # exists there so we don't have to remount the floppy when we need
        # to check for an old file on it (later in the order). if it does
        # just copy it off to a special location
	elif [ -r "$CONF_DEVICE_MOUNT_POINT/$OLD_NODE_CONF_NAME" ]; then
	    conf_file="$CONF_DEVICE_MOUNT_POINT/$OLD_NODE_CONF_NAME"
	    /bin/cp -f $conf_file $TMP_OLD_FLOPPY_CONF_FILE
	    echo $(date "+%H:%M:%S") " pl_netinit: found old named configuration file, checking later."
	else
	    echo $(date "+%H:%M:%S") " pl_netinit: floppy mounted, but no configuration file."
	fi

	/bin/umount $CONF_DEVICE_MOUNT_POINT
    else
	echo $(date "+%H:%M:%S") " pl_netinit: no floppy could be mounted, continuing search."
    fi

    # 2. check for a new named file on removable flash devices (those 
    # that start with sd*, because usb_storage emulates scsi devices).
    # to prevent checking normal scsi disks, also make sure
    # /sys/block/<dev>/removable is set to 1

    echo $(date "+%H:%M:%S") " pl_netinit: looking for node configuration file on flash based devices"

    # make the sd* hd* expansion fail to an empty string if there are no sd
    # devices
    shopt -s nullglob

    for device in /sys/block/[hsv]d*; do
	removable=$(cat $device/removable)
	if [[ $removable -ne 1 ]]; then
	    continue
	fi

	partitions=$(/bin/awk "\$4 ~ /$(basename $device)[0-9]*/ { print \$4 }" /proc/partitions)
	for partition in $partitions ; do
	    check_dev=/dev/$partition

	    echo $(date "+%H:%M:%S") " pl_netinit: looking for node configuration file on device $check_dev"
	    /bin/mount -o ro -t $NODE_CONF_DEVICE_FS_TYPES $check_dev \
		$CONF_DEVICE_MOUNT_POINT 2>&1 > /dev/null
	    if [[ $? -eq 0 ]]; then
		if [ -r "$CONF_DEVICE_MOUNT_POINT/$NEW_NODE_CONF_NAME" ]; then
		    conf_file="$CONF_DEVICE_MOUNT_POINT/$NEW_NODE_CONF_NAME"
		    echo $(date "+%H:%M:%S") " pl_netinit: found node configuration file $conf_file"
		    /etc/init.d/pl_validateconf < $conf_file > $USED_NET_CONF
		    echo $(date "+%H:%M:%S") " pl_netinit: found configuration"
		    /bin/umount $CONF_DEVICE_MOUNT_POINT
		    return 1
		fi
		
		echo $(date "+%H:%M:%S") " pl_netinit: not found"

		/bin/umount $CONF_DEVICE_MOUNT_POINT
	    fi
	done
    done

    # normal filename expansion setting
    shopt -u nullglob

    # 3. see if there is an old file on the floppy disk. if there was,
    # the file $TMP_OLD_FLOPPY_CONF_FILE will be readable.
    if [ -r "$TMP_OLD_FLOPPY_CONF_FILE" ]; then
	conf_file=$TMP_OLD_FLOPPY_CONF_FILE
	echo $(date "+%H:%M:%S") " pl_netinit: found node configuration file $conf_file"
	/etc/init.d/pl_validateconf < $conf_file > $USED_NET_CONF
	return 1
    fi


    # 4. check for plnode.txt on the cd at /usr/boot
    echo $(date "+%H:%M:%S") " pl_netinit: looking for network configuration on cd in /usr/boot"
    if [ -r "$CD_NET_CONF_BOOT" ]; then
	
	echo $(date "+%H:%M:%S") " pl_netinit: found cd configuration file $CD_NET_BOOT_CONF"
	/etc/init.d/pl_validateconf < $CD_NET_CONF_BOOT > $USED_NET_CONF
	return 1
    fi
    

    # 5. check for plnode.txt on the cd at /usr
    echo $(date "+%H:%M:%S") " pl_netinit: looking for network configuration on cd in /usr"
    if [ -r "$CD_NET_CONF_ROOT" ]; then
	
	echo $(date "+%H:%M:%S") " pl_netinit: found cd configuration file $CD_NET_CONF_ROOT"
	/etc/init.d/pl_validateconf < $CD_NET_CONF_ROOT > $USED_NET_CONF
	return 1
    fi


    # 6. no node configuration file could be found, fall back to
    # builtin default. this can't be used to install a machine, but
    # will at least let it download and run the boot manager, which
    # can inform the users appropriately.
    echo $(date "+%H:%M:%S") " pl_netinit: using default network configuration"
    if [ -r "$FALLBACK_NET_CONF" ]; then
	echo $(date "+%H:%M:%S") " pl_netinit: found cd default configuration file $FALLBACK_NET_CONF"
	/etc/init.d/pl_validateconf < $FALLBACK_NET_CONF > $USED_NET_CONF
	DEFAULT_NET_CONF=1
	return 1
    fi

    return 0
}


echo $(date "+%H:%M:%S") " pl_netinit: bringing loopback network device up"
/sbin/ifconfig lo 127.0.0.1 up

find_node_config
if [ $? -eq 0 ]; then
    # no network configuration file found. this should not happen as the
    # default cd image has a backup one. halt.
    echo $(date "+%H:%M:%S") " pl_netinit: unable to find even a default network configuration"
    echo $(date "+%H:%M:%S") " pl_netinit: file, this cd may be corrupt."
    net_init_failed
fi

# load the configuration file. if it was a default one (not user specified),
# then remove the saved copy from /tmp, but continue on. since a network 
# configuration file is required and boot scripts only know about this location
# they will fail (as they should) - but the network will be up if dhcp is
# available

echo $(date "+%H:%M:%S") " pl_netinit: loading network configuration"
. $USED_NET_CONF

if [[ $DEFAULT_NET_CONF -eq 1 ]]; then
    /bin/rm -f $USED_NET_CONF
fi

# initialize IPMI device
if [[ -n "$IPMI_ADDRESS" ]] ; then
    echo -n "pl_netinit: initializing IPMI: "
    cmd="ipnmac -i $IPMI_ADDRESS"
    if [[ -n "$IPMI_MAC" ]] ; then
	cmd="$cmd -m $IPMI_MAC"
    fi
    echo $cmd
    $cmd
fi

# now, we need to find which device to use (ie, eth0 or eth1). start out
# by defaulting to eth0, then see if the network configuration file specified
# either a mac address (in which case we will need to find the device), or
# the device itself

ETH_DEVICE=
if [[ -n "$NET_DEVICE" ]]; then
    # the user specified a mac address we should use. find the network
    # device for it.
    NET_DEVICE=$(tr A-Z a-z <<<$NET_DEVICE)

    pushd /sys/class/net
    for device in *; do
	dev_address=$(cat $device/address | tr A-Z a-z)
	if [ "$device" == "$NET_DEVICE" -o "$dev_address" == "$NET_DEVICE" ]; then
	    ETH_DEVICE=$device
	    echo $(date "+%H:%M:%S") " pl_netinit: found device $ETH_DEVICE with mac address $dev_address"
	    break
	fi
    done
    popd
fi

# if we didn't find a device yet, check which is the primary
if [[ -z "$ETH_DEVICE" ]]; then
    pushd /etc/sysconfig/network-scripts > /dev/null
    for conf in ifcfg-*; do
	egrep -q '^PRIMARY=["'"'"']?[yY1t]' $conf || continue
	ETH_DEVICE=${conf#ifcfg-}
	break
    done
    popd > /dev/null
fi

# still nothing? fail the boot.
if [[ -z "$ETH_DEVICE" ]]; then
    echo $(date "+%H:%M:%S") " pl_netinit: unable to find a usable device, check to make sure"
    echo $(date "+%H:%M:%S") " pl_netinit: the NET_DEVICE field in the configuration file"
    echo $(date "+%H:%M:%S") " pl_netinit: corresponds with a network adapter on this system"
    net_init_failed
fi


# actually check to make sure ifconfig <device> succeeds
/sbin/ifconfig $ETH_DEVICE up 2>&1 > /dev/null
if [[ $? -ne 0 ]]; then
    echo $(date "+%H:%M:%S") " pl_netinit: device $ETH_DEVICE does not exist, most likely"
    echo $(date "+%H:%M:%S") " pl_netinit: this cd does not have hardware support for your"
    echo $(date "+%H:%M:%S") " pl_netinit: network adapter. please send the following lines"
    echo $(date "+%H:%M:%S") " pl_netinit: to PlanetLab Support: support@planet-lab.org"
    echo $(date "+%H:%M:%S") " pl_netinit: for further assistance"
    echo
    /sbin/lspci -n | /bin/grep "Class 0200"    
    echo

    net_init_failed
fi

echo $(date "+%H:%M:%S") " pl_netinit: attempting to start networking"
/sbin/service network start

# for backwards compatibility
/sbin/ifconfig $ETH_DEVICE > $IFCONFIG_OUTPUT

echo $(date "+%H:%M:%S") " pl_netinit: network online"

